structures in OOPs: classes, objects, constructors
features of OOPs: inheritance, encapsulation, polymorphism, composition

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

state: features that describe an object, stored in fields / variables / attributes, defined in class code block (not in method)
behaviour: actions performed by an object, stored in methods

class: blueprint for designing object
class members: instance, static
member can be field / method / dependent element

static member: one copy in memory; value is associated with the object itself;
               accessed by class name, without object;
               can access only static attributes;
               requires 'static' keyword
               static variable ex: static int a = 1;

instance member: each object has a different value stored for this field;
                 accessed by object of class;
                 can access all (both instance and static) attributes;
                 does not require keyword (ex: int b = 2;)
                 instance variable ex: int a = 1;
                 calling an instance method: Scanner scan = new Scanner(System.in);

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

classes are grouped into packages

top-level class is not enclosed in another class
class modifiers: public, (none)
                 public: any class in any package can access (unrestricted)
                 none: only classes in same package can access

class member modifiers: public, protected, (none), private
                        public: any class in any package can access (unrestricted)
                        protected: classes in same package and subclasses in other packages can access
                        none: only classes in same package can access
                        private: no other class can access this member

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

encapsulation: bundling of behaviour and attributes on a single object
               hiding fields and methods from public access

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

how to call a public class:
--------------------------
1) define a public class outside the Main class as you would in a separate file
   public class Main {
     public void abc {
       <...>
     }
   }
   public class Xyz {   // referred to as sister class
     public void pqr {
       <...>
     }
   }

2) call it in one of Main class' methods
   <className> <variableName> = new <className>();
   ex: Xyz var = new Xyz();
       var.pqr();

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

fields: defined in class code block (not in method);
        assigned default values if not initialized;

getter: method that gets the value of a private field and returns it;
        written in the sister class (Xyz): public <returnType> get<detail>() {
                                             <...>
                                           }
        called in the Main class in a method as var.getDetail();

setter: method that sets the value of a private field

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

this: special keyword, refers to instance created when object was instantiated (current instance of the class);
      used in setter;
      called as: this.<variable> = <same variable>; (because the value of the parameter is assigned to the private variable)

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

POJO: Plain Old Java Object;
      mostly has only instance fields;
      usually has only getters and setters for the instance fields;
      db frameworks use POJOs to read data from / write to dbs / files / streams
      aka bean or JavaBean: JavaBean = POJO + rules;
          Entity (it mirrors db entities);
          DTO: Data Transfer Object (description of an object that can be modeled as just data);

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

inheritance: using 'extends' (specifies the superclass / parent class of the class being declared);
             only one class in extends clause;
             uses super() to call the superclass being extended;

super(): calls a constructor directly on the super class from the subclass' constructor;
         must be the first statement of the constructor (thus, cannot be used with this())

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

overriding methods: method creation on a subclass with the same signature as a method on a superclass;
                    method signature: method name + (number & types of parameters);
                    child class shows different behaviour from the parent class;
                    extends functionality of parent class

polymorphism: 'many forms';
              simplifies and extends code;

java..lang.Object
