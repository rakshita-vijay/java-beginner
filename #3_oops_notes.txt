structures in OOPs: classes, objects, constructors
features of OOPs: inheritance, encapsulation, polymorphism, composition

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

state: features that describe an object
       stored in fields / variables / attributes, defined in class code block (not in method)
behaviour: actions performed by an object
           stored in methods

class: blueprint for designing object
class members: instance, static
member can be field / method / dependent element

static member: one copy in memory; value is associated with the object itself;
               accessed by class name, without object;
               can access only static attributes;
               requires 'static' keyword
               static variable ex: static int a = 1;

instance member: each object has a different value stored for this field;
                 accessed by object of class;
                 can access all (both instance and static) attributes;
                 does not require keyword (ex: int b = 2;)
                 instance variable ex: int a = 1;
                 calling an instance method: Scanner scan = new Scanner(System.in);

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

interactive programs:
--------------------
https://courses.cs.washington.edu/courses/cse142/11sp/lectures/04-15/slides4-1.pdf

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

classes are grouped into packages

top-level class is not enclosed in another class
class modifiers: public, (none)
                 public: any class in any package can access (unrestricted)
                 none: only classes in same package can access

class member modifiers: public, protected, (none), private
                        public: any class in any package can access (unrestricted)
                        protected: classes in same package and subclasses in other packages can access
                        none: only classes in same package can access
                        private: no other class can access this member

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

encapsulation: bundling of behaviour and attributes on a single object;
               hiding fields and methods from public access

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

how to call a public class:
--------------------------
1) define a public class outside the Main class as you would in a separate file
   public class Main {
     public void abc {
       <...>
     }
   }
   public class Xyz {   // referred to as sister class
     public void pqr {
       <...>
     }
   }

2) call it in one of Main class' methods
   <className> <variableName> = new <className>();
   ex: Xyz var = new Xyz();
       var.pqr();

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

fields: defined in class code block (not in method);
        assigned default values if not initialized

getter: method that gets the value of a private field and returns it;
        written in the sister class (Xyz): public <returnType> get<detail>() {
                                             <...>
                                           }
        called in the Main class in a method as var.getDetail();

setter: method that sets the value of a private field

getters and setters do not improve encapsulation, but are helpful to access the variables

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

this: special keyword, refers to instance created when object was instantiated (current instance of the class);
      used in setter;
      called as: this.<variable> = <same variable>; (because the value of the parameter is assigned to the private variable)

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

POJO: Plain Old Java Object;
      mostly has only instance fields;
      usually has only getters and setters for the instance fields;
      db frameworks use POJOs to read data from / write to dbs / files / streams
      AKA bean or JavaBean: JavaBean = POJO + rules;
          Entity (it mirrors db entities);
          DTO: Data Transfer Object (description of an object that can be modeled as just data)

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

inheritance: using 'extends' (specifies the superclass / parent class of the class being declared);
             only one class in extends clause;
             uses super() to call the superclass being extended

super(): calls a constructor directly on the super class from the subclass' constructor;
         must be the first statement of the constructor (thus, cannot be used with this())

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

public > protected > private

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

overriding methods: method creation on a subclass with the same signature as a method on a superclass;
                    method signature: method name + (number & types of parameters);
                    child class shows different behaviour from the parent class;
                    extends functionality of parent class

polymorphism: 'many forms';
              simplifies and extends code

Object(): class from which all objects, arrays, etc. inherit methods;
          called as 'extends java.lang.Object' or 'extends Object' or simply doesn't need to be called at all

          included methods: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Object.html

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

both are calls

super(): used to call parent class members;
         used to call a parent constructor

this(): used only in a constructor;
        used to call current class members;
        used to call an overloaded constructor;
        must be the first statement

can have only one - never both

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

method overloading: n methods in same class with same name, different parameters and same/different return type;
                    can be done in subclasses;
                    reduces duplicated code;
                    possible with static and instance methods;
                    AKA compile-time polymorphism

method overriding: n methods in n classes with same name, same parameters and same return type
                   (defining method in child class which exists in parent class, with same signature);
                   methods can be overridden only in child/sub classes;
                   possible with instance methods;
                   AKA run-time polymorphism and dynamic method dispatch

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

inheritance: 'IS A' relationship;
             reuses functionalities and attributes;
             breaks encapsulation as direct access to a parent state might be required;
             less flexible - adding/removing classes impacts all subclasses

composition: 'HAS A' relationship;
             combination of classes work as a single object;
             more functional, classes share attributes, they don't inherit it from parent class;
             usually has a parent class where private objects of other classes are given

encapsulation: hiding things by making them private or inaccessible, protects integrity;
               makes interface simpler, hides unnecessary (mostly internal) details

polymorphism: 'many forms'
              (a single method's execution/behaviour can be different for different objects at run-time);
              simplifies and extends code - main method code is not changed as subclasses are added;
              inheritance supports polymorphism

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

compile-time type: user-declared type

var: contextual keyword that lets code take advantage of Local Variable Type Inference
     (java figures out compile-time type for us);
     can't be a return or parameter type

run-time type may be different from compile-time type because of polymorphism

getting class name: <object>.getClass().getSimpleName();

instanceof operator: tests type of object / instance;
                     written as: <objectToTest> instancef <possibleType>;
                                 <objectToTest> instancef <possibleType> <shortcutObjectName>;   // easy to ref

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

packages: corresponds to a folder in the os;
          organizes & groups a set of related types in a tree-like fashion by functionality/ relationship
          (structures the codebase while import makes it more readable);
          named in all lowercase;
          hierarchical levels of package separated by '.';
          encapsulates our classes from classes in other packages;
          come before import statements;
          only one package statement allowed

          https://www.geeksforgeeks.org/packages-in-java/

same class names can be reused acress different packages - differentiated by the import statement (branches)

library vs. package: library: collection of classes that have been written by somebody else
                     package: collection of classes you write yourself

Fully Qualified Class Name (FQCN): <packageName> + <className>;
                                   instead of importing at the top, can use FQCN in the location of utilization / reference

classes are implicitly placed in the default package;
importing from default package to classes outside default package is not;

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

'import static', not 'static import' for importing package

modifiers: abstract, static, final, default, native, synchronized
           final: cannot be overridden by subclasses or methods in same class
                  final variables are initialized to null
           default: only applicable to interfaces
           native: not covered in the course

abstract class: has method signature, has return type, doesn't have method body
                instance of ac cannot be created (with new ---)
                can have constructor which is called by subclasses during construction
                cannot be private
                acs and interfaces can have a mix of abstract and concrete methods
                can declare fields that aren't static and final
                can extendone parent class, can implement multiple interfaces

abstract method: unimplemented

concrete code: has method body (operational code)
               implements abstract code if it overrides it

abstract classes always participate in inheritance

abstract class can extend a concrete class
abstract class can extend an abstract class
concrete class can extend an abstract class

abstract method can only be defined in an abstract class
abstract child class doesn't have to implement abstract parent methods

abstract child class can include additional abstract methods which forces child classes to implement acc's and apc's abstract methods

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

if you omit access modifier on class member, implicity package private
if you omit access modifier on interface member, implicity package public

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

final modifier: prevents further modifications, cannot be overridden by subclasses

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

constant: variable that cannot be changed
          usually named with all caps with underscores as separators
          static constant is accessed via type name

          double = final double = public final double = public static final double

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

abstract classes and interfaces: abstracted reference types
                                 used as variable, method, return, and list types
                                 referred to as coding to an interface
                                 using interface as reference type is considered best coding practice

coding to an interface: scales well to support new subtypes

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

extension method: identified by the 'default' modifier
                  concrete method, must have method body
                  like a method on a superclass because it can be overridden
                  adding this does not break classes implementing the interface







// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

interface: by using an interface, code must implement all abstract methods in it
           can be extended (by other interfaces) and implemented (by classes)
           interface cannot implement interface

??? ??? ??? ??? ??? ???

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

interfaces: can extend another interface
            can have a mix of abstract and concrete methods
            all methods on interfaces declared without a method bedoy are, by default, public and abstract
            decouples 'what' from 'how'

unrelated classes will implement your intereface
wanna separate different behaviour

Collections Framework: Lists, Queues, ArrayList, LinkedList
